# Generated by Django 4.2.25 on 2025-10-31 00:49

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import reviews.models.wiki_configuration


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='PendingPage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pageid', models.BigIntegerField()),
                ('title', models.CharField(max_length=500)),
                ('stable_revid', models.BigIntegerField()),
                ('pending_since', models.DateTimeField(blank=True, null=True)),
                ('fetched_at', models.DateTimeField(auto_now=True)),
                ('categories', models.JSONField(blank=True, default=list)),
                ('wikidata_id', models.CharField(blank=True, max_length=16, null=True)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Wiki',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('family', models.CharField(default='wikipedia', max_length=100)),
                ('api_endpoint', models.URLField(help_text='Full API endpoint, e.g. https://fi.wikipedia.org/w/api.php')),
                ('script_path', models.CharField(default='/w', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='WikiConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blocking_categories', models.JSONField(blank=True, default=list)),
                ('auto_approved_groups', models.JSONField(blank=True, default=list)),
                ('redirect_aliases', models.JSONField(blank=True, default=list, help_text='Cached redirect magic word aliases from wiki API (i.e: https://fi.wikipedia.org/w/api.php?action=query&meta=siteinfo&siprop=magicwords)')),
                ('superseded_similarity_threshold', models.FloatField(default=0.2, help_text='Similarity threshold (0.0-1.0) for detecting superseded additions. Lower values are more strict. If text additions from a pending revision have similarity below this threshold in the current stable version, the revision is considered superseded and can be auto-approved.')),
                ('ores_damaging_threshold', models.FloatField(blank=True, default=0.0, help_text='Edits with damaging probability above this will not be auto-approved. ', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ores_goodfaith_threshold', models.FloatField(blank=True, default=0.0, help_text='Edits with goodfaith probability below this will not be auto-approved. ', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ores_damaging_threshold_living', models.FloatField(blank=True, default=0.0, help_text='ORES damaging threshold for living person biographies (stricter). ', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ores_goodfaith_threshold_living', models.FloatField(blank=True, default=0.0, help_text='ORES goodfaith threshold for living person biographies (stricter). ', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('enabled_checks', models.JSONField(blank=True, default=reviews.models.wiki_configuration._get_default_enabled_checks, help_text='List of check IDs to run. All checks are enabled by default.')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('wiki', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='configuration', to='reviews.wiki')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewStatisticsMetadata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_refreshed_at', models.DateTimeField(auto_now=True)),
                ('last_data_loaded_at', models.DateTimeField(blank=True, help_text='Timestamp when statistics data was last loaded from MediaWiki', null=True)),
                ('total_records', models.IntegerField(default=0)),
                ('oldest_review_timestamp', models.DateTimeField(blank=True, null=True)),
                ('newest_review_timestamp', models.DateTimeField(blank=True, null=True)),
                ('max_log_id', models.BigIntegerField(blank=True, help_text='Maximum log_id fetched (for incremental updates)', null=True)),
                ('wiki', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='statistics_metadata', to='reviews.wiki')),
            ],
            options={
                'verbose_name_plural': 'Review statistics metadata',
            },
        ),
        migrations.CreateModel(
            name='PendingRevision',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revid', models.BigIntegerField()),
                ('parentid', models.BigIntegerField(blank=True, null=True)),
                ('user_name', models.CharField(blank=True, max_length=255)),
                ('user_id', models.BigIntegerField(blank=True, null=True)),
                ('timestamp', models.DateTimeField()),
                ('fetched_at', models.DateTimeField(auto_now_add=True)),
                ('age_at_fetch', models.DurationField()),
                ('sha1', models.CharField(max_length=40)),
                ('comment', models.TextField(blank=True)),
                ('change_tags', models.JSONField(blank=True, default=list)),
                ('wikitext', models.TextField()),
                ('rendered_html', models.TextField(blank=True)),
                ('render_error_count', models.IntegerField(blank=True, null=True)),
                ('categories', models.JSONField(blank=True, default=list)),
                ('superset_data', models.JSONField(blank=True, default=dict)),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='reviews.pendingpage')),
            ],
            options={
                'ordering': ['timestamp'],
                'unique_together': {('page', 'revid')},
            },
        ),
        migrations.AddField(
            model_name='pendingpage',
            name='wiki',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pending_pages', to='reviews.wiki'),
        ),
        migrations.CreateModel(
            name='ModelScores',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ores_damaging_score', models.FloatField(blank=True, help_text='ORES damaging probability (0.0-1.0, higher = more likely damaging)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ores_goodfaith_score', models.FloatField(blank=True, help_text='ORES goodfaith probability (0.0-1.0, higher = more likely good faith)', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('ores_fetched_at', models.DateTimeField(auto_now_add=True, help_text='When ORES scores were fetched from the API')),
                ('revision', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='model_scores', to='reviews.pendingrevision')),
            ],
            options={
                'verbose_name': 'Model Scores',
                'verbose_name_plural': 'Model Scores',
            },
        ),
        migrations.CreateModel(
            name='ReviewStatisticsCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewer_name', models.CharField(max_length=255)),
                ('reviewed_user_name', models.CharField(max_length=255)),
                ('page_title', models.CharField(max_length=500)),
                ('page_id', models.BigIntegerField()),
                ('reviewed_revision_id', models.BigIntegerField()),
                ('pending_revision_id', models.BigIntegerField()),
                ('reviewed_timestamp', models.DateTimeField()),
                ('pending_timestamp', models.DateTimeField()),
                ('review_delay_days', models.IntegerField(help_text='Review delay in days')),
                ('fetched_at', models.DateTimeField(auto_now=True)),
                ('wiki', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_statistics', to='reviews.wiki')),
            ],
            options={
                'ordering': ['-reviewed_timestamp'],
                'indexes': [models.Index(fields=['wiki', 'reviewer_name'], name='reviews_rev_wiki_id_cf1e3a_idx'), models.Index(fields=['wiki', 'reviewed_user_name'], name='reviews_rev_wiki_id_2d152d_idx'), models.Index(fields=['wiki', 'reviewed_timestamp'], name='reviews_rev_wiki_id_e6065e_idx')],
                'unique_together': {('wiki', 'reviewed_revision_id')},
            },
        ),
        migrations.CreateModel(
            name='ReviewActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of the review activity')),
                ('number_of_reviewers', models.IntegerField(help_text='Number of unique reviewers on this date')),
                ('number_of_reviews', models.IntegerField(help_text='Total number of reviews on this date')),
                ('number_of_pages', models.IntegerField(help_text='Number of pages reviewed on this date')),
                ('reviews_per_reviewer', models.FloatField(blank=True, help_text='Average reviews per reviewer', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('wiki', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_activity', to='reviews.wiki')),
            ],
            options={
                'verbose_name_plural': 'Review Activity',
                'ordering': ['-date'],
                'unique_together': {('wiki', 'date')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='pendingpage',
            unique_together={('wiki', 'pageid')},
        ),
        migrations.CreateModel(
            name='FlaggedRevsStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of the statistics (monthly resolution)')),
                ('total_pages_ns0', models.IntegerField(blank=True, help_text='Total articles in main namespace', null=True)),
                ('synced_pages_ns0', models.IntegerField(blank=True, help_text='Articles reviewed to current revision', null=True)),
                ('reviewed_pages_ns0', models.IntegerField(blank=True, help_text='Articles with at least one reviewed revision', null=True)),
                ('pending_lag_average', models.FloatField(blank=True, help_text='Average time articles wait for review', null=True)),
                ('pending_changes', models.IntegerField(blank=True, help_text='Calculated as reviewedPages_ns0 - syncedPages_ns0', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('wiki', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flaggedrevs_statistics', to='reviews.wiki')),
            ],
            options={
                'verbose_name_plural': 'FlaggedRevs Statistics',
                'ordering': ['-date'],
                'unique_together': {('wiki', 'date')},
            },
        ),
        migrations.CreateModel(
            name='EditorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255)),
                ('usergroups', models.JSONField(blank=True, default=list)),
                ('is_blocked', models.BooleanField(default=False)),
                ('is_bot', models.BooleanField(default=False)),
                ('is_former_bot', models.BooleanField(default=False)),
                ('is_autopatrolled', models.BooleanField(default=False)),
                ('is_autoreviewed', models.BooleanField(default=False)),
                ('fetched_at', models.DateTimeField(auto_now=True)),
                ('wiki', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='editor_profiles', to='reviews.wiki')),
            ],
            options={
                'ordering': ['username'],
                'unique_together': {('wiki', 'username')},
            },
        ),
    ]
